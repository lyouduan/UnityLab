#pragma kernel FrustumCulling

uint instanceCount;
StructuredBuffer<float4x4> positions;
float4 planes[6];
AppendStructuredBuffer<float4x4> cullingResults;

float4x4 vpMatrix;
uint depthTextureSize;
Texture2D hizTexture;

bool IsOutsideThePlane(float4 plane, float3 pointPosition)
{
    if(dot(plane.xyz, pointPosition) + plane.w > 0)
        return true;
    return false;
}

[numthreads(512,1,1)]
void FrustumCulling (uint3 id : SV_DispatchThreadID)
{
    if(id.x >= instanceCount)
        return;
    float4x4 info = positions[id.x];
    float3 boundMin = float3(-1.5, 0, -1.5);
    float3 boundMax = float3(1.5, 7, 1.5);
    float4 boundVerts[8];//AABB8个顶点坐标
    boundVerts[0] = mul(info, float4(boundMin, 1));
    boundVerts[1] = mul(info, float4(boundMax, 1));
    boundVerts[2] = mul(info, float4(boundMax.x, boundMax.y, boundMin.z, 1));
    boundVerts[3] = mul(info, float4(boundMax.x, boundMin.y, boundMax.z, 1));
    boundVerts[6] = mul(info, float4(boundMax.x, boundMin.y, boundMin.z, 1));
    boundVerts[4] = mul(info, float4(boundMin.x, boundMax.y, boundMax.z, 1));
    boundVerts[5] = mul(info, float4(boundMin.x, boundMax.y, boundMin.z, 1));
    boundVerts[7] = mul(info, float4(boundMin.x, boundMin.y, boundMax.z, 1));

    //如果8个顶点都在某个面外，则肯定在视锥体外面
    for (int i = 0; i < 6; i++)
    {
        for(int j = 0; j < 8; j++)
        {
            float3 boundPosition = boundVerts[j].xyz;

            if(!IsOutsideThePlane(planes[i], boundPosition))
                break;
            if(j == 7)
            return;
        }
    }
    
    float minX = 1, minY = 1, minZ = 1, maxX = -1, maxY = -1, maxZ = -1;

    for (int j = 0; j < 8; j++) {
        float4 clipPos = mul(vpMatrix, boundVerts[j]);  // corrected here
        float4 ndc = clipPos / clipPos.w;
        minX = min(minX, ndc.x);
        minY = min(minY, ndc.y);
        maxX = max(maxX, ndc.x);
        maxY = max(maxY, ndc.y);
        maxZ = max(maxZ, ndc.z);
    }

    // HiZ
    float2 uvLeftBottom = float2(minX, minY) * 0.5f + 0.5f;
    float2 uvRightTop = float2(maxX, maxY) * 0.5f + 0.5f;
    //DirextX下NDC的z值即为深度（因为MVP变换后是反转过的，所以要取最大的那个值）
    float depth = maxZ;
    
    //计算应该读取哪层mipmap
    uint mipmapLevel = (uint)clamp(log2(max(maxX - minX, maxY - minY) * 0.5f * depthTextureSize), 0, log2(depthTextureSize) - 4);
    //当前mipmap的大小
    uint size = depthTextureSize / (1 << mipmapLevel);

    //左下角和右下角点所在的像素,不使用clamp会导致相机左右边出现一条剔除不掉的草，因为有些草部分超框了
    uint2 pixelLeftBottom = uint2(clamp(uvLeftBottom.x * size, 0, size - 1), clamp(uvLeftBottom.y * size, 0, size - 1));
    uint2 pixelRightTop = uint2(clamp(uvRightTop.x * size, 0, size - 1), clamp(uvRightTop.y * size, 0, size - 1));

    float depthInTexture = hizTexture.mips[mipmapLevel][pixelLeftBottom].r;

    if (pixelLeftBottom.x < pixelRightTop.x && pixelLeftBottom.y < pixelRightTop.y) 
    {
        depthInTexture = min(min(depthInTexture, hizTexture.mips[mipmapLevel][pixelRightTop].r),
            min(hizTexture.mips[mipmapLevel][int2(pixelLeftBottom.x, pixelRightTop.y)].r, hizTexture.mips[mipmapLevel][int2(pixelRightTop.x, pixelLeftBottom.y)].r));
    }
    else if (pixelLeftBottom.x < pixelRightTop.x)
        depthInTexture = min(depthInTexture, hizTexture.mips[mipmapLevel][int2(pixelRightTop.x, pixelLeftBottom.y)].r);
    else if (pixelLeftBottom.y < pixelRightTop.y)
        depthInTexture = min(depthInTexture, hizTexture.mips[mipmapLevel][int2(pixelLeftBottom.x, pixelRightTop.y)].r);

    if (depthInTexture > depth) return;

    cullingResults.Append(info);
}